(this.webpackJsonp=this.webpackJsonp||[]).push([["nets-checkout"],{IovY:function(t){t.exports=JSON.parse('{"nets-checkout":{"title":"Nets","api-actions":"Nets API actions","payment-id":"Nets paymentId","general":{"mainMenuItemGeneral":"Nets","descriptionTextModule":"Einstellungen für Nets"},"capture":{"buttonTitle":"Capture","successTitle":"Nets","successMessage":"Capture erfolgreich durchgeführt.","errorTitle":"Nets"},"refund":{"buttonTitle":"Refund","successTitle":"Nets","successMessage":"Refund erfolgreich durchgeführt.","errorTitle":"Nets"}}}')},JbEq:function(t,e,n){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function a(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=c(t);if(e){var i=c(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return u(this,n)}}function u(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function c(t){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}n.r(e);var l=Shopware.Classes.ApiService,d=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(c,t);var e,n,r,u=a(c);function c(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"nets";return i(this,c),u.call(this,t,e,n)}return e=c,(n=[{key:"captureTransaction",value:function(t,e,n){return this.httpClient.post("/nets/transaction/charge",{params:{orderId:t,paymentId:e,amount:n}},{headers:this.getBasicHeaders()}).then((function(t){return l.handleResponse(t)}))}},{key:"refundTransaction",value:function(t,e,n){return this.httpClient.post("/nets/transaction/refund",{params:{orderId:t,paymentId:e,amount:n}},{headers:this.getBasicHeaders()}).then((function(t){return l.handleResponse(t)}))}},{key:"getSummaryAmounts",value:function(t){var e=t.transactions.first();return this.httpClient.post("/nets/transaction/summary",{params:{transaction:e}},{headers:this.getBasicHeaders()}).then((function(t){return l.handleResponse(t)}))}}])&&o(e.prototype,n),r&&o(e,r),c}(l),f=Shopware.Application;f.addServiceProvider("NetsCheckoutApiPaymentService",(function(t){var e=f.getContainer("init");return new d(e.httpClient,t.loginService)}));var p=n("eeL/"),m=n.n(p),h=Shopware,g=(h.Component,h.Mixin);Shopware.Component.override("sw-order-user-card",{template:m.a,inject:["NetsCheckoutApiPaymentService"],mixins:[g.getByName("notification"),g.getByName("sw-inline-snippet")],data:function(){return{isLoading:!0,amountAvailableForCapturing:0,amountAvailableForRefunding:0,captureButtonLoading:!1,refundButtonLoading:!1,orderState:null,refundPendingStatus:!1}},beforeMount:function(){this.getSummaryAmounts()},props:["currentOrder"],methods:{getTransactionId:function(t){var e=t.transactions.first(),n=null;return e.hasOwnProperty("customFields")&&e.customFields&&e.customFields.hasOwnProperty("nets_easy_payment_details")&&e.customFields.nets_easy_payment_details&&(n=e.customFields.nets_easy_payment_details.transaction_id),n},canCapture:function(){return this.amountAvailableForCapturing>0},getSummaryAmounts:function(){var t;(t=this).isLoading=!0,this.getTransactionId(this.currentOrder)&&this.NetsCheckoutApiPaymentService.getSummaryAmounts(this.currentOrder).then((function(e){t.amountAvailableForCapturing=e.amountAvailableForCapturing,t.amountAvailableForRefunding=e.amountAvailableForRefunding,t.isLoading=!1,t.orderState=e.orderState,t.refundPendingStatus=e.refundPendingStatus})).catch((function(e){t.isLoading=!1}))},canRefund:function(){return!this.refundPendingStatus&&(this.amountAvailableForRefunding>0&&0==this.amountAvailableForCapturing)},capture:function(t){var e=this,n=this,r=this.currentOrder.id,i=this.amountAvailableForCapturing;n.isLoading=!0,this.NetsCheckoutApiPaymentService.captureTransaction(r,t,i).then((function(t){e.createNotificationSuccess({title:e.$tc("Nets"),message:e.$tc("Capture processed successfully.")}),n.isLoading=!1,e.getSummaryAmounts()})).catch((function(t){e.createNotificationError({title:e.$tc("Nets"),message:e.$tc(t.message)}),n.isLoading=!1,e.getSummaryAmounts()}))},refund:function(t){var e=this,n=this;n.isLoading=!0;var r=this.currentOrder.id,i=this.amountAvailableForRefunding;this.NetsCheckoutApiPaymentService.refundTransaction(r,t,i).then((function(){e.createNotificationSuccess({title:e.$tc("Nets"),message:e.$tc("Refund processed successfully.")}),n.isLoading=!1,e.getSummaryAmounts()})).catch((function(t){e.createNotificationError({title:e.$tc("Nets"),message:e.$tc("Error occurred during refund")}),n.isLoading=!1,e.getSummaryAmounts()}))}}});var y=n("IovY"),v=n("j3Og");Shopware.Module.register("nets-checkout",{type:"plugin",name:"NetsCheckout",title:"nets-checkout.general.mainMenuItemGeneral",description:"nets-checkout.general.descriptionTextModule",version:"1.0.0",targetVersion:"1.0.0",icon:"default-action-settings",snippets:{"de-DE":y,"en-GB":v}})},"eeL/":function(t,e){t.exports='\n{% block sw_order_detail_base_secondary_info_payment %}\n    {% parent %}\n\n    {% block sw_order_detail_base_secondary_info_transaction_id %}\n        <div v-if="getTransactionId(currentOrder) != null">\n            <dt>{{ $tc(\'nets-checkout.payment-id\') }}</dt>\n            <dd>{{ getTransactionId(currentOrder) }}</dd>\n        </div>\n    {% endblock %}\n\n    <template v-if="getTransactionId(currentOrder) != null">\n        <div v-if="canCapture()">\n            {{ $tc(\'nets-checkout.api-actions\') }}\n        </div>\n\n        <div class="capture-controls" v-if="canCapture()">\n            <sw-number-field numberType="float" :step="null" :min="null" :max="null"  v-model="amountAvailableForCapturing" :digits="2" :allowEmpty="false">\n            </sw-number-field>\n            <sw-button-process @click="capture(getTransactionId(currentOrder))" :isLoading="captureButtonLoading">\n                {{ $tc(\'nets-checkout.capture.buttonTitle\') }}\n            </sw-button-process>\n        </div>\n\n        <div class="refund-controls" v-if="canRefund()">\n            <sw-number-field numberType="float" :step="null" :min="null" :max="null"  v-model="amountAvailableForRefunding" :digits="2" :allowEmpty="false">\n            </sw-number-field>\n            <sw-button-process @click="refund(getTransactionId(currentOrder))" :isLoading="refundButtonLoading">\n                {{ $tc(\'nets-checkout.refund.buttonTitle\') }}\n            </sw-button-process>\n        </div>\n    </template>\n\n{% endblock %}\n'},j3Og:function(t){t.exports=JSON.parse('{"nets-checkout":{"title":"Nets","api-actions":"Nets API actions","payment-id":"Nets paymentId","capture":{"buttonTitle":"Capture","successTitle":"Nets","successMessage":"Capture processed successfully.","errorTitle":"Nets"},"refund":{"buttonTitle":"Refund","successTitle":"Nets","successMessage":"Refund processed successfully.","errorTitle":"Nets"}}}')}},[["JbEq","runtime"]]]);