{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:////var/www/sw6410.sokoni.it/public_html/custom/plugins/NetsCheckout/src/Resources/app/administration/src/api/nets-checkout-api-payment-service.js","webpack:////var/www/sw6410.sokoni.it/public_html/custom/plugins/NetsCheckout/src/Resources/app/administration/src/init/api-service.init.js","webpack:////var/www/sw6410.sokoni.it/public_html/custom/plugins/NetsCheckout/src/Resources/app/administration/src/module/nets-checkout/extension/sw-order/index.js","webpack:////var/www/sw6410.sokoni.it/public_html/custom/plugins/NetsCheckout/src/Resources/app/administration/src/module/nets-checkout/index.js","webpack:////var/www/sw6410.sokoni.it/public_html/custom/plugins/NetsCheckout/src/Resources/app/administration/src/component/nets-api-test-button/index.js","webpack:////var/www/sw6410.sokoni.it/public_html/custom/plugins/NetsCheckout/src/Resources/app/administration/src/main.js","webpack:////var/www/sw6410.sokoni.it/public_html/custom/plugins/NetsCheckout/src/Resources/app/administration/src/module/nets-checkout/extension/sw-order/sw-order.html.twig","webpack:////var/www/sw6410.sokoni.it/public_html/custom/plugins/NetsCheckout/src/Resources/app/administration/src/service/netsApiTestService.js","webpack:////var/www/sw6410.sokoni.it/public_html/custom/plugins/NetsCheckout/src/Resources/app/administration/src/component/nets-api-test-button/nets-api-test-button.html.twig"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ApiService","Shopware","Classes","NetsCheckoutApiPaymentService","httpClient","loginService","apiEndpoint","orderId","paymentId","amount","this","post","params","headers","getBasicHeaders","then","response","handleResponse","currentOrder","transaction","transactions","first","Application","addServiceProvider","container","initContainer","getContainer","Mixin","Component","override","template","inject","mixins","getByName","data","isLoading","amountAvailableForCapturing","amountAvailableForRefunding","captureButtonLoading","refundButtonLoading","orderState","refundPendingStatus","paymentMethod","beforeMount","getSummaryAmounts","props","methods","getTransactionId","result","customFields","nets_easy_payment_details","transaction_id","canCapture","me","catch","errorResponse","canRefund","capture","id","captureTransaction","createNotificationSuccess","title","$tc","message","createNotificationError","refund","refundTransaction","Module","register","type","description","version","targetVersion","icon","snippets","deDE","enGB","isSaveSuccessful","computed","pluginConfig","$parent","undefined","actualConfigData","null","saveFinish","check","netsApiTest","res","success","Locale","extend","localeDE","localeEN","ApiClient","values"],"mappings":"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","file":"static/js/nets-checkout.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/bundles/netscheckout/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"9P6t\");\n","const ApiService = Shopware.Classes.ApiService;\n\nclass NetsCheckoutApiPaymentService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'nets') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    captureTransaction(orderId, paymentId, amount) {\n        const route = '/nets/transaction/charge';\n        return this.httpClient\n            .post(\n                route,\n                {\n                    params: {orderId, paymentId, amount}\n                },\n                {\n                    headers: this.getBasicHeaders()\n                }\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    refundTransaction(orderId, paymentId, amount) {\n        const route = '/nets/transaction/refund';\n        return this.httpClient\n            .post(\n                route,\n                {\n                    params: {orderId, paymentId, amount}\n                },\n                {\n                    headers: this.getBasicHeaders()\n                }\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    getSummaryAmounts(currentOrder) {\n        const transaction = currentOrder.transactions.first();\n\n        const route = '/nets/transaction/summary';\n\n        return this.httpClient\n            .post(\n                route,\n                {\n                    params: {transaction}\n                },\n\n                {\n                    headers: this.getBasicHeaders()\n                }\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n}\nexport default NetsCheckoutApiPaymentService;\n","import NetsCheckoutApiPaymentService\n    from '../api/nets-checkout-api-payment-service';\n\nconst { Application } = Shopware;\n\nApplication.addServiceProvider('NetsCheckoutApiPaymentService', (container) => {\n    const initContainer = Application.getContainer('init');\n    return new NetsCheckoutApiPaymentService(initContainer.httpClient, container.loginService);\n});\n","const { Component, Mixin } = Shopware;\nimport template from './sw-order.html.twig';\n\nShopware.Component.override('sw-order-user-card', {\n    template,\n\n    inject: ['NetsCheckoutApiPaymentService'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n        Mixin.getByName('sw-inline-snippet')\n    ],\n\n    data() {\n        return {\n            isLoading: true,\n            amountAvailableForCapturing: 0,\n            amountAvailableForRefunding: 0,\n            captureButtonLoading: false,\n            refundButtonLoading: false,\n            orderState: null,\n            refundPendingStatus:false,\n\t\t\tpaymentMethod : null\n        };\n    },\n\n    beforeMount(){\n        this.getSummaryAmounts();\n    },\n\n    props: ['currentOrder'],\n\n    methods: {\n\n        getTransactionId(currentOrder) {\n            const transaction = currentOrder.transactions.first();\n            let result = null;\n            if(transaction.hasOwnProperty('customFields') && transaction['customFields']) {\n                if(transaction.customFields.hasOwnProperty('nets_easy_payment_details') &&\n                    transaction.customFields['nets_easy_payment_details']) {\n                    result = transaction.customFields.nets_easy_payment_details.transaction_id;\n                }\n            }\n            return result;\n        },\n\n        canCapture() {\n\n            if(this.amountAvailableForCapturing > 0 && this.orderState != \"cancelled\") {\n                return true;\n            }\n            return false;\n        },\n\n        getSummaryAmounts() {\n            let me;\n            me = this;\n            me.isLoading = true;\n\n            if(this.getTransactionId(this.currentOrder)) {\n                this.NetsCheckoutApiPaymentService.getSummaryAmounts(this.currentOrder)\n                    .then((response) => {\n                        //\n                        me.amountAvailableForCapturing = response.amountAvailableForCapturing;\n                        me.amountAvailableForRefunding = response.amountAvailableForRefunding;\n                        me.isLoading = false;\n                        me.orderState = response.orderState;\n                        me.refundPendingStatus = response.refundPendingStatus; \n\t\t\t\t\t\tme.paymentMethod = response.paymentMethod;\n                    })\n                    .catch((errorResponse) => {\n                        //\n                        me.isLoading = false;\n                    });\n            }\n        },\n\n        canRefund() {\n            if(this.refundPendingStatus){\n                return false;\n            }\n            if(this.amountAvailableForRefunding > 0 && this.amountAvailableForCapturing == 0 && this.orderState != \"cancelled\") {\n                return true;\n            }\n\n            return false;\n        },\n\n        capture(paymentId) {\n            let me = this;\n            const orderId = this.currentOrder.id;\n            const amount = this.amountAvailableForCapturing;\n            me.isLoading = true;\n            this.NetsCheckoutApiPaymentService.captureTransaction(orderId, paymentId, amount)\n                .then((result) => {\n                    this.createNotificationSuccess({\n                        title: this.$tc('Nets'),\n                        message: this.$tc('Capture processed successfully.')\n                    });\n                    me.isLoading = false;\n                    this.getSummaryAmounts();\n                })\n                .catch((errorResponse) => {\n                    this.createNotificationError({\n                        title: this.$tc('Nets'),\n                        message: this.$tc(errorResponse.message)\n                    });\n                    me.isLoading = false;\n                    this.getSummaryAmounts();\n                });\n        },\n\n        refund(paymentId) {\n            let me = this;\n            me.isLoading = true;\n\n            const orderId = this.currentOrder.id;\n            const amount = this.amountAvailableForRefunding;\n\n            this.NetsCheckoutApiPaymentService.refundTransaction(orderId, paymentId, amount)\n                .then(() => {\n                    this.createNotificationSuccess({\n                        title: this.$tc('Nets'),\n                        message: this.$tc('Refund processed successfully.')\n                    });\n                    me.isLoading = false;\n                    this.getSummaryAmounts();\n                })\n                .catch((errorResponse) => {\n                    this.createNotificationError({\n                        title: this.$tc('Nets'),\n                        message: this.$tc('Error occurred during refund')\n                    });\n                    me.isLoading = false;\n                    this.getSummaryAmounts();\n                });\n        },\n    },\n});\n","const { Module } = Shopware;\n\nimport './extension/sw-order';\n\nimport deDE from './snippet/de-DE.json';\nimport enGB from './snippet/en-GB.json';\n\nModule.register('nets-checkout', {\n    type: 'plugin',\n    name: 'NetsCheckout',\n    title: 'nets-checkout.general.mainMenuItemGeneral',\n    description: 'nets-checkout.general.descriptionTextModule',\n    version: '1.0.0',\n    targetVersion: '1.0.0',\n    icon: 'default-action-settings',\n\n    snippets: {\n        'de-DE': deDE,\n        'en-GB': enGB\n    },\n});\n","const { Component, Mixin } = Shopware;\nimport template from './nets-api-test-button.html.twig';\n\nComponent.register('nets-api-test-button', {\n    template,\n\n    props: ['label'],\n    inject: ['netsApiTest'],\n\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n\n    data() {\n        return {\n            isLoading: false,\n            isSaveSuccessful: false,\n        };\n    },\n\n    computed: {\n        pluginConfig() {\n            let $parent = this.$parent;\n\n            while ($parent.actualConfigData === undefined) {\n                $parent = $parent.$parent;\n            }\n\n            return $parent.actualConfigData.null;\n        }\n    },\n\n    methods: {\n        saveFinish() {\n            this.isSaveSuccessful = false;\n        },\n\n        check() {\n            this.isLoading = true;\n            this.netsApiTest.check(this.pluginConfig).then((res) => {\n                if (res.success) {\n                    this.isSaveSuccessful = true;\n                    this.createNotificationSuccess({\n                        title: this.$tc('nets-api-test-button.title'),\n                        message: this.$tc('nets-api-test-button.success')\n                    });\n                } else {\n                    this.createNotificationError({\n                        title: this.$tc('nets-api-test-button.title'),\n                        message: this.$tc('nets-api-test-button.error')\n                    });\n                }\n\n                this.isLoading = false;\n            });\n        }\n    }\n})\n","import './init/api-service.init';\nimport './module/nets-checkout';\nimport './api/nets-checkout-api-payment-service';\nimport './service/netsApiTestService';\nimport './component/nets-api-test-button';\n\nimport localeDE from './snippet/de_DE.json';\nimport localeEN from './snippet/en_GB.json';\nShopware.Locale.extend('de-DE', localeDE);\nShopware.Locale.extend('en-GB', localeEN);","module.exports = \"\\n{% block sw_order_detail_base_secondary_info_payment %}\\n    {% parent %}\\n\\n\\t  {% block sw_order_detail_base_secondary_info_payment_method_via %}\\n        <div v-if=\\\"paymentMethod != null\\\">\\n            <dt>Payment via </dt>\\n            <dd>{{ paymentMethod }}</dd>\\n        </div>\\n    {% endblock %}\\n\\t\\n    {% block sw_order_detail_base_secondary_info_transaction_id %}\\n       <div v-if=\\\"getTransactionId(currentOrder) != null\\\">\\n            <dt>{{ $tc('nets-checkout.payment-id') }}</dt>\\n            <dd>{{ getTransactionId(currentOrder) }}</dd>\\n        </div>\\n    {% endblock %}\\n\\n    <template v-if=\\\"getTransactionId(currentOrder) != null\\\">\\n        <div v-if=\\\"canCapture()\\\">\\n            {{ $tc('nets-checkout.api-actions') }}\\n        </div>\\n\\n        <div class=\\\"capture-controls\\\" v-if=\\\"canCapture()\\\">\\n            <sw-number-field numberType=\\\"float\\\" :step=\\\"null\\\" :min=\\\"null\\\" :max=\\\"null\\\"  v-model=\\\"amountAvailableForCapturing\\\" :digits=\\\"2\\\" :allowEmpty=\\\"false\\\">\\n            </sw-number-field>\\n            <sw-button-process @click=\\\"capture(getTransactionId(currentOrder))\\\" :isLoading=\\\"captureButtonLoading\\\">\\n                {{ $tc('nets-checkout.capture.buttonTitle') }}\\n            </sw-button-process>\\n        </div>\\n\\n        <div class=\\\"refund-controls\\\" v-if=\\\"canRefund()\\\">\\n            <sw-number-field numberType=\\\"float\\\" :step=\\\"null\\\" :min=\\\"null\\\" :max=\\\"null\\\"  v-model=\\\"amountAvailableForRefunding\\\" :digits=\\\"2\\\" :allowEmpty=\\\"false\\\">\\n            </sw-number-field>\\n            <sw-button-process @click=\\\"refund(getTransactionId(currentOrder))\\\" :isLoading=\\\"refundButtonLoading\\\">\\n                {{ $tc('nets-checkout.refund.buttonTitle') }}\\n            </sw-button-process>\\n        </div>\\n    </template>\\n\\n{% endblock %}\\n\";","const ApiService = Shopware.Classes.ApiService;\nconst { Application } = Shopware;\n\nclass ApiClient extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'nets-api-test') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    check(values) {\n        const headers = this.getBasicHeaders({});\n\n        return this.httpClient\n            .post(`/test/verify`, values,{\n                headers\n            })\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n}\n\nApplication.addServiceProvider('netsApiTest', (container) => {\n    const initContainer = Application.getContainer('init');\n    return new ApiClient(initContainer.httpClient, container.loginService);\n});\n","module.exports = \"<div>\\n    <sw-button-process\\n        :isLoading=\\\"isLoading\\\"\\n        :processSuccess=\\\"isSaveSuccessful\\\"\\n        @process-finish=\\\"saveFinish\\\"\\n        @click=\\\"check\\\"\\n    >{{ $tc('nets-api-test-button.button') }}</sw-button-process>\\n</div>\\n\";"],"sourceRoot":""}